[
  {
    "path": "tidytuesday/super_bowl_ads/",
    "title": "Super Bowl Ads",
    "description": "Sankey plot of super bowl ads based of certain criteria",
    "author": [
      {
        "name": "Roupen Khanjian",
        "url": {}
      }
    ],
    "date": "2021-03-29",
    "categories": [],
    "contents": "\n\npre.r {\n    background-color: #e7eaea;\n}\n\n\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse', CRAN v1.3.0\nlibrary(ggsankey) # Sankey, Alluvial and Sankey Bump Plots, [github::davidsjoberg/ggsankey] v0.0.99999 \n\n\n\n\n\nyoutube <- \n  readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-02/youtube.csv')\n\nyt <- youtube %>% \n  select(-c(superbowl_ads_dot_com_url, youtube_url,\n            id, etag, published_at, thumbnail)) %>% \n  mutate(type = case_when(\n    brand == \"Toyota\" ~ \"car\",\n    brand == \"Hynudai\" ~ \"car\",\n    brand == \"Kia\" ~ \"car\",\n    brand == \"Bud Light\" ~ \"food/drink\",\n    brand == \"Coca-Cola\" ~ \"food/drink\",\n    brand == \"Budweiser\" ~ \"food/drink\",\n    brand == \"Pepsi\" ~ \"food/drink\",\n    brand == \"Doritos\" ~ \"food/drink\",\n    brand == \"NFL\" ~ \"other\",\n    brand == \"E-Trade\" ~ \"other\"\n  ))\n\nyt_sankey <- yt %>% \n  drop_na(brand, type) %>% \n  make_long(brand, type)\n\nggplot(yt_sankey,\n       aes(x = x, next_x = next_x, node = node, \n           next_node = next_node, fill = factor(node), \n           label = node)) +\n  geom_sankey(flow.alpha = .65,\n              flow.color = \"black\",\n              node.color = \"black\") +\n  geom_sankey_label(size = 3.5, color = \"white\", fill = \"black\") +\n  scale_fill_viridis_d() +\n  theme_void() +\n  labs(x = NULL,\n       title = \"Types of Brands\",\n       subtitle = \"Sankey plot\") +\n  theme(legend.position = \"none\",\n        plot.title = element_text(hjust = .5, face = \"bold\",\n                                  size = 18),\n        plot.subtitle = element_text(hjust = .5,\n                                  size = 15),\n        axis.text.x = element_text(vjust = 4,\n                                   face = \"bold\",\n                                   size = 14),\n        plot.background = element_rect(colour = \"#e7eaea\",\n                                       fill = \"#e7eaea\"))\n\n\n\n\n\n\nyt_sankey <- yt %>% \n  drop_na(type, animals, funny, patriotic, celebrity, danger, use_sex) %>% \n  rename(`use sex` = \"use_sex\") %>% \n  make_long(type, animals, funny, patriotic, celebrity, danger, `use sex`)\n\nggplot(yt_sankey,\n       aes(x = x, next_x = next_x, node = node, \n           next_node = next_node, fill = factor(node), \n           label = node)) +\n  geom_sankey(flow.alpha = .65,\n              flow.color = \"black\",\n              node.color = \"black\") +\n  geom_sankey_label(size = 3.5, color = \"white\", fill = \"black\") +\n  scale_fill_manual(values = c(\"gold4\", \"firebrick\", \"darkblue\", \"salmon3\", \"seagreen\")) +\n  theme_void() +\n  labs(x = NULL,\n       title = \"Super Bowl Ads\",\n       subtitle = \"Sankey plot\") +\n  theme(legend.position = \"none\",\n        plot.title = element_text(hjust = .5, face = \"bold\",\n                                  size = 18),\n        plot.subtitle = element_text(hjust = .5,\n                                  size = 15),\n        axis.text.x = element_text(vjust = 4,\n                                   face = \"bold\",\n                                   size = 14),\n        plot.background = element_rect(colour = \"#e7eaea\",\n                                       fill = \"#e7eaea\"))\n\n\n\n\n\n\n\n",
    "preview": "tidytuesday/super_bowl_ads/distill-preview.png",
    "last_modified": "2021-05-06T19:47:26-06:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "tidytuesday/plastics/",
    "title": "Plastic Pollution",
    "description": "Plots of total plastic waste categorized by brands and countries.",
    "author": [
      {
        "name": "Roupen Khanjian",
        "url": {}
      }
    ],
    "date": "2021-02-07",
    "categories": [],
    "contents": "\n\npre.r {\n    background-color: #e7eaea;\n}\n\n\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse', CRAN v1.3.0\nlibrary(lubridate) # Make Dealing with Dates a Little Easier, CRAN v1.7.10\nlibrary(skimr) # Compact and Flexible Summaries of Data, CRAN v2.1.2\nlibrary(ggfortify) # Data Visualization Tools for Statistical Analysis Results, CRAN v0.4.11\nlibrary(plotly) # Create Interactive Web Graphics via 'plotly.js', CRAN v4.9.3\nlibrary(ggpol) # Visualizing Social Science Data with 'ggplot2', CRAN v0.0.7\nlibrary(ggthemes) # Extra Themes, Scales and Geoms for 'ggplot2', CRAN v4.2.4\nlibrary(patchwork) # The Composer of Plots, CRAN v1.1.1\nlibrary(RColorBrewer) # ColorBrewer Palettes, CRAN v1.1-2\n\n\n\n\n\nplastics <- readr::read_csv(\n  'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-01-26/plastics.csv')\n  \nplastics_longer <- plastics %>% \n  pivot_longer(empty:grand_total, \n               names_to = \"plastic_type\", \n               values_to = \"count\")\n\n\n# change nestle to nestle\nplastics_longer <- plastics_longer %>% \n  mutate(company =\n           case_when(\n             str_detect(parent_company, c(\"Nestlé\")) ~ \"Nestle\",\n             str_detect(parent_company, c(\"Nestlè\")) ~ \"Nestle\",\n             str_detect(parent_company, c(\"nestle\")) ~ \"Nestle\",\n             str_detect(parent_company, c(\"NESTLE\")) ~ \"Nestle\",\n             str_detect(parent_company, c(\"nestlé\")) ~ \"Nestle\",\n             str_detect(parent_company, c(\"Nestlé\")) ~ \"Nestle\",\n             str_detect(parent_company, c(\"nestlé\")) ~ \"Nestle\",\n             str_detect(parent_company, c(\"Pepsico\")) ~ \"PepsiCo\",\n             str_detect(parent_company, c(\"PepsiCo\")) ~ \"PepsiCo\",\n             !str_detect(parent_company, c(\"Nestlé\")) ~ parent_company,\n             !str_detect(parent_company, c(\"Nestle\")) ~ parent_company,\n             !str_detect(parent_company, c(\"nestle\")) ~ parent_company,\n             !str_detect(parent_company, c(\"NESTLE\")) ~ parent_company,\n             !str_detect(parent_company, c(\"nestlé\")) ~ parent_company,\n             !str_detect(parent_company, c(\"Nestlé\")) ~ parent_company,\n             !str_detect(parent_company, c(\"nestlé\")) ~ parent_company,\n             !str_detect(parent_company, c(\"Pepsico\")) ~ parent_company,\n             !str_detect(parent_company, c(\"PepsiCo\")) ~ parent_company\n           )) %>% \n  mutate(country = \n           case_when(\n             str_detect(country, c(\"NIGERIA\")) ~ \"Nigeria\",\n             !str_detect(country, c(\"NIGERIA\")) ~ country\n           ))\n\n\ntop_countries <- plastics_longer %>%\n  filter(plastic_type != \"grand_total\") %>%\n  filter(country != \"EMPTY\") %>%\n  count(country,\n        wt = count,\n        sort = TRUE) %>%\n  slice_max(n, n = 10)\n\ntop_countries_names <- plastics_longer %>% \n  right_join(top_countries, by = \"country\")\n\nplastics_longer_countries <- plastics_longer %>%\n  mutate(country =\n           case_when(\n             country %in% top_countries[1,1] ~ country,\n             country %in% top_countries[2,1] ~ country,\n             country %in% top_countries[3,1] ~ country,\n             country %in% top_countries[4,1] ~ country,\n             country %in% top_countries[5,1] ~ country,\n             country %in% top_countries[6,1] ~ country,\n             country %in% top_countries[7,1] ~ country,\n             country %in% top_countries[8,1] ~ country,\n             country %in% top_countries[9,1] ~ country,\n             country %in% top_countries[10,1] ~ country,\n             !country %in% top_countries[\"country\"] ~ \"Other\"\n           ))\n\ncountries_data <- plastics_longer_countries %>%\n  filter(plastic_type != \"grand_total\") %>%\n  filter(country != \"EMPTY\") %>%\n  count(country,\n        wt = count,\n        sort = TRUE) %>%\n  slice_max(n, n = 12)\n\n# Countries plot\nc1 <- ggplot(data = countries_data) +\n  geom_arcbar(aes(shares = n, r0 = 4, r1 = 10, fill = country)) +\n  scale_fill_manual(values=c(\"cadetblue4\", \"violetred3\", \"olivedrab\",\n                              \"hotpink\", \"gold2\", \"aquamarine3\", \"lemonchiffon2\",\n                              \"lightcyan3\", \"royalblue\", \"slateblue3\", \"yellow\")) +\n  coord_fixed() +\n  theme_void() +\n  labs(title = \"Top 10 Countries in Total Plastic Waste\",\n       subtitle = \"All other countries are combined\\ninto one category 'Other'\",\n       fill = \"Countries\") +\n  theme(legend.key.size = unit(0.25, 'cm'), #change legend key size\n        plot.title = element_text(size = 12, face = \"bold\", color = \"white\"),\n        plot.subtitle = element_text(size = 10, color = \"white\"),\n        legend.title = element_text(size=10.5, face = \"bold\", color = \"white\"), \n        legend.text = element_text(size=9, color = \"white\")) \n\ntop_brands <- plastics_longer %>%\n  filter(plastic_type != \"grand_total\") %>%\n  filter(!company %in% c(\"Grand Total\",\n                                \"Unbranded\",\n                                \"null\",\n                                \"NULL\",\n                                \"Assorted\")) %>% \n  count(company,\n        wt = count,\n        sort = TRUE) %>%\n  slice_max(n, n = 10)\n\ntop_brands_names <- plastics_longer %>% \n  right_join(top_brands, by = \"company\")\n\nplastics_longer_brands <- plastics_longer %>%\n  mutate(company =\n           case_when(\n             company %in% top_brands[1,1] ~ company,\n             company %in% top_brands[2,1] ~ company,\n             company %in% top_brands[3,1] ~ company,\n             company %in% top_brands[4,1] ~ company,\n             company %in% top_brands[5,1] ~ company,\n             company %in% top_brands[6,1] ~ company,\n             company %in% top_brands[7,1] ~ company,\n             company %in% top_brands[8,1] ~ company,\n             company %in% top_brands[9,1] ~ company,\n             company %in% top_brands[10,1] ~ company,\n             !company %in% top_brands[\"company\"] ~ \"Other\"\n           ))\n\nbrands_data <- plastics_longer_brands %>%\n  filter(plastic_type != \"grand_total\") %>%\n  count(company,\n        wt = count,\n        sort = TRUE) %>%\n  slice_max(n, n = 11)\n\n# Brands plot\nb1 <- ggplot(data = brands_data) +\n  geom_arcbar(aes(shares = n, r0 = 5, r1 = 10, fill = company)) +\n  coord_fixed() +\n  scale_fill_manual(values=c(\"cadetblue4\", \"violetred3\", \"olivedrab\",\n                              \"hotpink\", \"gold2\", \"aquamarine3\", \"lemonchiffon2\",\n                              \"lightcyan3\", \"royalblue\", \"slateblue3\", \"yellow\")) +\n  theme_void() +\n  labs(title = \"Top 10 Brands in Total Plastic Waste\",\n       subtitle = \"All other brands are combined\\ninto one category 'Other'\",\n       fill = \"Company\") +\n  theme(legend.key.size = unit(0.25, 'cm'), #change legend key size\n        plot.title = element_text(size = 12, face = \"bold\", color = \"white\"),\n        plot.subtitle = element_text(size = 10, color = \"white\"),\n        legend.title = element_text(size=10.5, face = \"bold\", color = \"white\"),\n        legend.text = element_text(size=9, color = \"white\")) \n\npatchwork <- b1 / c1\n\npatchwork +\n  plot_annotation(\n    caption = \"By Roupen Khanjian\"\n  ) & theme(plot.background = element_rect(fill = \"black\",\n                                                 color = \"black\"),\n                  strip.background = element_rect(fill = \"black\",\n                                                 color = \"black\"),\n            plot.caption = element_text(color = \"white\"))\n\n\n\n\n\n\n\n",
    "preview": "tidytuesday/plastics/distill-preview.png",
    "last_modified": "2021-05-06T19:47:26-06:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "tidytuesday/nz_bird/",
    "title": "New Zealand Bird of the Year",
    "description": "Time series plots of when people voted for the New Zealand bird of the year",
    "author": [
      {
        "name": "Roupen Khanjian",
        "url": {}
      }
    ],
    "date": "2019-11-19",
    "categories": [],
    "contents": "\n\npre.r {\n    background-color: #e7eaea;\n}\n\n\n# Tidy Tuesday 11/19/2019\n# NZ Bird of the Year\n# Roupen Khanjian\n\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse' \nlibrary(lubridate) # Make Dealing with Dates a Little Easier\nlibrary(ggthemes) # Extra Themes, Scales and Geoms for 'ggplot2'\nlibrary(patchwork) # The Composer of Plots\nlibrary(wesanderson) # A Wes Anderson Palette Generator\n\n\n\n\n\nnz_bird <- readr::read_csv(\n  \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-11-19/nz_bird.csv\")\n\nnz_bird <- nz_bird %>% \n  dplyr::filter(complete.cases(bird_breed) == TRUE) %>% # Remove missing votes\n  mutate(Rank = fct_infreq(vote_rank, ordered = TRUE)) %>% # Convert vote_rank into a factor\n  mutate(Rank = str_replace(Rank, \"vote_\", \"\")) %>% # Change vote column strings. \n  dplyr::select(-vote_rank) %>% \n  unite(\"time\", date:hour, remove = FALSE) %>% # Combine date and hour to a new column named time\n  mutate(time = ymd_h(time)) %>% # Convert time to date-times type\n  mutate(weekday =  wday(date, label = TRUE, abbr = FALSE)) # Add the weekday \n\n# Get top 5 birds\nnz_bird_top5 <- nz_bird %>% \n  count(bird_breed, sort = TRUE) %>% \n  slice(1:5) \n\n# Get top 5 birds for my data frame\nnz_bird_join <- nz_bird %>% \n  inner_join(nz_bird_top5, by = \"bird_breed\") %>% \n  arrange(desc(n))\n\n# Color palette\nmy_colors <-  wes_palette(name = \"Darjeeling1\", n = 5, type = \"discrete\")\n\np1 <- nz_bird_join %>% \n  group_by(time, bird_breed) %>% \n  count(time) %>% \n  arrange(desc(n)) %>% \n  ggplot(aes(x = time, y = n, fill = bird_breed)) +\n  geom_col(alpha = 0.95) + \n  scale_x_datetime(date_breaks = \"2 days\", date_labels = \"%b %d\") +\n  scale_y_continuous(breaks = seq(0, 500, by = 100)) +\n  labs(x = \"\",y = \"Frequency\", title = \"Hourly Voting\",\n       fill = \"Bird Breed\") +\n  theme_bw() +\n  scale_fill_manual(values = my_colors)  +\n  theme(title = element_text(face=\"bold\", size=9),\n        axis.text.y = element_text(face=\"bold\", size=11, angle = 10),\n        axis.text.x =  element_text(face=\"bold\", size=11, angle = 10),\n        axis.title.x = element_text(face = \"bold\", size = 13),\n        axis.title.y = element_blank(),\n        legend.position = \"bottom\",\n        panel.background = element_rect(fill = \"white\", colour = \"black\"),\n        legend.direction = \"horizontal\")\n\nweek_levels <- levels(nz_bird_join$weekday) # extract weekdays\nweek_levels <- str_sub(week_levels, start = 1L, end = 3L) # extract first 3 letters\n\np4 <- nz_bird_join %>% \n  mutate(weekday = str_sub(weekday,\n                           start = 1L, end = 3L)) %>%\n  mutate(weekday = factor(weekday, levels = week_levels,\n                          ordered = TRUE)) %>% \n  group_by(weekday, hour, bird_breed) %>% \n  count(hour) %>% \n  arrange(desc(n)) %>%\n  ggplot(aes(x = hour, y = n, fill = bird_breed)) +\n  geom_col() + \n  facet_grid(weekday ~ .) +\n  scale_x_continuous(breaks = seq(0, 23, by = 2)) +\n  scale_y_continuous(breaks = seq(0, 800, by = 400)) +\n  labs(x = \"Time of day\", y = \"Frequency\",\n       fill = \"Bird Breed\") +\n  scale_fill_manual(values = my_colors)  +\n  theme_bw() +\n  theme(axis.text.y = element_text(face=\"bold\", size=9, angle = 10),\n        axis.text.x =  element_text(face=\"bold\", size=11, angle = 10),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        panel.background = element_rect(fill = \"white\",colour = \"black\"),\n        strip.text = element_text(face=\"bold\", size=9),\n        strip.background = element_rect(fill = \"white\"),\n        legend.text = element_text(color = \"black\", face = \"bold\", size = 7.75),\n        legend.position = \"none\",\n        legend.key.size = unit(0.255, units = \"cm\"),\n        legend.background = element_rect(fill = \"white\"),\n        plot.background = element_rect(fill = \"white\",\n                                       colour = \"white\"))\n\np3 <- nz_bird_join %>% \n  group_by(hour, bird_breed) %>% \n  count(hour) %>% \n  ggplot(aes(x = hour, y = n, fill = bird_breed)) +\n  geom_col(alpha = 0.95) + \n  scale_x_continuous(breaks = seq(0, 23, by = 2)) +\n  scale_y_continuous(breaks = seq(0, 16000, by = 1000)) +\n  labs(x = \"\", y = \"Frequency\", title = \"Hour of Day Voting Occured\") +\n  theme_bw() +\n  scale_fill_manual(name = \"Bird Breed\", values = my_colors) +\n  theme(title = element_text(face=\"bold\", size=9),\n        axis.text.y = element_text(face=\"bold\", size=11, angle = 10),\n        axis.text.x = element_text(face=\"bold\", size=11, angle = 10),\n        axis.title.y = element_blank(),\n        legend.position = \"bottom\",\n        panel.background = element_rect(fill = \"white\",colour = \"black\"),\n        legend.direction = \"horizontal\")\n\np2 <- nz_bird_join %>% \n  group_by(weekday, bird_breed) %>% \n  count(weekday) %>% \n  arrange(desc(n)) %>% \n  ggplot(aes(x = weekday, y = n, fill = bird_breed)) +\n  geom_col(alpha = 0.95) + \n  scale_y_continuous(breaks = seq(0, 40000, by = 2500)) +\n  labs(x = \"\",y = \"Frequency\", title = \"Day of Week Voting Occured\") +\n  theme_bw() +\n  scale_fill_manual(values = my_colors) +\n  theme(title = element_text(face=\"bold\", size=9),\n        axis.text.y = element_text(face=\"bold\", size=11, angle = 10),\n        axis.text.x =  element_text(face=\"bold\", size=10.5, angle = 13),\n        axis.title.y = element_blank(),\n        axis.title.x = element_text(face = \"bold\", size = 13),\n        legend.position = \"none\",\n        panel.background = element_rect(fill = \"white\", colour = \"black\"))\n\n# Plot 1\np1 +\n  plot_annotation(\n    title = \"Tidy Tuesday: NZ Bird of the Year\",\n    subtitle = \"When did people vote for the top 5 bird breeds?\",\n    theme = theme(plot.title = element_text(face = \"bold\", size = 15),\n                  plot.subtitle = element_text( size = 12)))\n\n\n\n\n\n\n\n\n\n\n",
    "preview": "tidytuesday/nz_bird/distill-preview.png",
    "last_modified": "2021-05-06T19:47:26-06:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  }
]
